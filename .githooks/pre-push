#!/bin/bash

echo "Pre-push hook initialized..."

echo "Checking for prettier installation..."

# Check if Prettier is available via npx
if ! npx --no-install prettier --help > /dev/null 2>&1; then
  echo "Prettier is not installed. Please install it to use this hook."
  exit 1
fi

echo "Checking against remote for changed files..."

# Find the branch you're pushing to
remote_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)

if [ -z "$remote_branch" ]; then
  echo "No upstream branch found. Is this a new branch?"
  echo "Pushing changes..."
  exit 0
fi

echo "Checking for committed files..."

# Get the list of files that differ between the local branch and the remote branch
committed_files=$(git diff --name-only "$remote_branch" HEAD | grep -E '\.(js|ts|json|css|html|md)$')

# If no relevant files are found, skip the check
if [ -z "$committed_files" ]; then
  echo "No relevant files to check for formatting."
  exit 0
fi

echo "Running 'prettier --check' against committed changes..."
# Run Prettier check on committed files only
npx prettier --check $committed_files
prettier_status=$?

# If Prettier found issues, prompt the user
if [ $prettier_status -ne 0 ]; then
  echo "Prettier has detected formatting issues."
  echo "Would you like to proceed with the push? (y/n)"
  
  # Read user input and store the result
  read -p "(y/n)?: " proceed < /dev/tty

   # While loop to ensure valid input
  while [[ "$proceed" != "y" && "$proceed" != "n" ]]; do
    echo "Invalid input, please enter 'y' or 'n'."
    read -p "(y/n)?: " proceed < /dev/tty
  done

  # If the user says no, abort the push
  if [[ "$proceed" != "y" ]]; then
    echo "Push aborted. Please format your code and try again."
    exit 1
  else
    echo "Proceeding with the push despite formatting issues."
  fi
else
  echo "All files are formatted correctly."
  echo "Pushing changes..."
fi

# If everything is fine or user allows, continue with the push
exit 0
